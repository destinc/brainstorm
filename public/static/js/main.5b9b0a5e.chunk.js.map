{"version":3,"sources":["components/Idea.js","components/IdeaForm.js","components/Notification.js","components/IdeasContainer.js","components/Login.jsx","components/Register.jsx","services/api-helper.jsx","App.js","serviceWorker.js","index.js"],"names":["Idea","handleClick","props","onClick","idea","id","handleDelete","onDelete","className","this","title","body","Component","IdeaForm","handleInput","event","resetNotification","setState","target","name","value","handleBlur","state","axios","put","then","response","console","log","updateIdea","data","catch","error","onBlur","type","placeholder","onChange","ref","titleRef","defaultStyle","transition","opacity","padding","transitionStyles","entering","background","entered","Notification","inProp","in","notification","Transition","timeout","transitionState","style","IdeasContainer","addNewIdea","post","ideas","update","$splice","editingIdeaId","ideaIndex","findIndex","x","$set","transitionIn","deleteIdea","delete","enableEditing","focus","get","map","key","input","Login","onSubmit","e","preventDefault","handleLogin","formData","username","handleChange","password","to","Register","handleRegister","email","api","create","baseURL","loginUser","loginData","a","resp","localStorage","setItem","token","defaults","headers","common","authorization","user","registerUser","registerData","App","currentUser","authFormData","handleLoginButton","history","push","userData","handleLogout","removeItem","authHandleChange","prevState","exact","path","render","withRouter","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mXA6BeA,E,2MAzBbC,YAAc,WACZ,EAAKC,MAAMC,QAAQ,EAAKD,MAAME,KAAKC,K,EAGrCC,aAAe,WACb,EAAKJ,MAAMK,SAAS,EAAKL,MAAME,KAAKC,K,wEAIpC,OACE,yBAAKG,UAAU,WACb,0BAAMA,UAAU,eAAeL,QAASM,KAAKH,cAA7C,KAGA,wBAAIE,UAAU,aAAaL,QAASM,KAAKR,aACtCQ,KAAKP,MAAME,KAAKM,OAEnB,uBAAGF,UAAU,YAAWL,QAASM,KAAKR,aACnCQ,KAAKP,MAAME,KAAKO,W,GApBRC,aC4CJC,G,kBAzCX,WAAYX,GAAQ,IAAD,8BACf,4CAAMA,KAOVY,YAAc,SAACC,GACX,EAAKb,MAAMc,oBACX,EAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,SAVlC,EAajBC,WAAa,WACX,IAAMjB,EAAO,CAACM,MAAO,EAAKY,MAAMZ,MAAOC,KAAM,EAAKW,MAAMX,MACxDY,IAAMC,IAAN,sCACiC,EAAKtB,MAAME,KAAKC,IAC/C,CAACD,KAAMA,IAERqB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,EAAKxB,MAAM2B,WAAWH,EAASI,SAEhCC,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,OArB5B,EAAKV,MAAQ,CACTZ,MAAO,EAAKR,MAAME,KAAKM,MACvBC,KAAM,EAAKT,MAAME,KAAKO,MAJX,E,sEA2Bf,OACI,yBAAKH,UAAU,WACX,0BAAMyB,OAAQxB,KAAKY,YAC9B,2BAAOb,UAAU,YAAY0B,KAAK,OAAOf,KAAK,QAAQgB,YAAY,gBAC3Df,MAAOX,KAAKa,MAAMZ,MAAO0B,SAAU3B,KAAKK,YACxCuB,IAAK5B,KAAKP,MAAMoC,WACvB,8BAAU9B,UAAU,YAAYW,KAAK,OAAOgB,YAAY,qBACjDf,MAAOX,KAAKa,MAAMX,KAAMyB,SAAU3B,KAAKK,oB,GAnC5BF,c,ikBCDvB,IAEM2B,EAAe,CACnBC,WAAW,cAAD,OAHK,IAGL,mCAHK,IAGL,kBACVC,QAAS,EACTC,QAAS,QAGLC,EAAmB,CACvBC,SAAU,CAAEH,QAAS,EAAGI,WAAY,cACpCC,QAAU,CAAEL,QAAS,IAkBRM,EAfM,SAAC,GAAD,IAAOC,EAAP,EAAGC,GAAYC,EAAf,EAAeA,aAAf,OACnB,kBAACC,EAAA,EAAD,CAAYF,GAAID,EAAQI,QAdT,MAeZ,SAACC,GACA,OACE,0BAAMC,MAAK,KACNf,EADM,GAENI,EAAiBU,KAEnBH,OC2EIK,E,YAxFX,WAAYrD,GAAQ,IAAD,8BACf,4CAAMA,KAiBVsD,WAAa,WACTjC,IAAMkC,KACN,CAACrD,KAAM,CAACM,MAAO,GAAIC,KAAM,MACxBc,MAAK,SAAAC,GACF,IAAMgC,EAAQC,IAAO,EAAKrC,MAAMoC,MAAO,CACnCE,QAAS,CAAC,CAAC,EAAG,EAAGlC,EAASI,SAE5B,EAAKb,SACD,CACIyC,MAAOA,EACTG,cAAenC,EAASI,KAAKzB,QAExC0B,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,OA9Bb,EAiCjBH,WAAa,SAACzB,GACZ,IAAM0D,EAAY,EAAKxC,MAAMoC,MAAMK,WAAU,SAAAC,GAAC,OAAIA,EAAE3D,KAAOD,EAAKC,MAC1DqD,EAAQC,IAAO,EAAKrC,MAAMoC,MAAZ,eAAqBI,EAAY,CAAEG,KAAM7D,KAC7D,EAAKa,SAAS,CAACyC,MAAOA,EAAOR,aAAc,aAAcgB,cAAc,KApCxD,EAuCjBC,WAAa,SAAC9D,GACZkB,IAAM6C,OAAN,UAAgB/D,IACfoB,MAAK,SAAAC,GACJ,IAAMoC,EAAY,EAAKxC,MAAMoC,MAAMK,WAAU,SAAAC,GAAC,OAAIA,EAAE3D,KAAOA,KACrDqD,EAAQC,IAAO,EAAKrC,MAAMoC,MAAO,CAAEE,QAAS,CAAC,CAACE,EAAW,MAC/D,EAAK7C,SAAS,CAACyC,MAAOA,OAEvB3B,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,OA9Cb,EAiDjBhB,kBAAoB,WAClB,EAAKC,SAAS,CAACiC,aAAc,GAAIgB,cAAc,KAlDhC,EAoDfG,cAAgB,SAAChE,GACf,EAAKY,SAAS,CAAC4C,cAAexD,IAAK,WACjC,EAAKK,MAAM4D,YApDf,EAAKhD,MAAQ,CACToC,MAAO,GACPG,cAAe,KACfX,aAAc,GACdgB,cAAc,GANH,E,iFAUE,IAAD,OAClB3C,IAAMgD,MACL9C,MAAK,SAAAC,GACF,EAAKT,SAAS,CAACyC,MAAOhC,EAASI,UAElCC,OAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,Q,+BA2CtB,IAAD,OACP,OACE,6BACI,6BACA,4BAAQxB,UAAU,gBAChBL,QAASM,KAAK+C,YADhB,YAIA,kBAAC,EAAD,CAAcP,GAAIxC,KAAKa,MAAM4C,aAAchB,aAAezC,KAAKa,MAAM4B,gBAEtEzC,KAAKa,MAAMoC,MAAMc,KAAI,SAACpE,GACnB,OAAG,EAAKkB,MAAMuC,gBAAkBzD,EAAKC,GAEjC,kBAAC,EAAD,CAAUD,KAAMA,EAAMqE,IAAKrE,EAAKC,GAChCwB,WAAY,EAAKA,WACjBS,SAAW,SAAAoC,GAAK,OAAI,EAAKhE,MAAQgE,GACjC1D,kBAAmB,EAAKA,oBAGxB,kBAAC,EAAD,CAAMZ,KAAMA,EAAMqE,IAAKrE,EAAKC,GAC5BF,QAAS,EAAKkE,cACd9D,SAAU,EAAK4D,qB,GAhFFvD,a,QCiBd+D,G,MArBD,SAACzE,GAEb,OACE,yBAAKM,UAAU,kBACb,wBAAIA,UAAU,aAAd,SACA,6BACA,0BAAMoE,SAAU,SAACC,GACfA,EAAEC,iBACF5E,EAAM6E,gBACN,wCACA,2BAAO5D,KAAK,WAAWe,KAAK,OAAOd,MAAOlB,EAAM8E,SAASC,SAAU7C,SAAUlC,EAAMgF,eACnF,wCACA,2BAAO/D,KAAK,WAAWe,KAAK,WAAWd,MAAOlB,EAAM8E,SAASG,SAAU/C,SAAUlC,EAAMgF,eACvF,6BACA,4BAAQ1E,UAAU,SAAlB,SACA,kBAAC,IAAD,CAAM4E,GAAG,YAAY5E,UAAU,YAA/B,gBCEO6E,EApBE,SAACnF,GAEhB,OACE,yBAAKM,UAAU,kBACb,wCACA,6BACA,0BAAMoE,SAAU1E,EAAMoF,gBACpB,wCACA,2BAAOnE,KAAK,WAAWe,KAAK,OAAOd,MAAOlB,EAAM8E,SAASC,SAAU7C,SAAUlC,EAAMgF,eACnF,qCACA,2BAAO/D,KAAK,QAAQe,KAAK,OAAOd,MAAOlB,EAAM8E,SAASO,MAAOnD,SAAUlC,EAAMgF,eAC7E,wCACA,2BAAO/D,KAAK,WAAWe,KAAK,WAAWd,MAAOlB,EAAM8E,SAASG,SAAU/C,SAAUlC,EAAMgF,eACvF,6BACA,4BAAQ1E,UAAU,YAAlB,eCdFgF,EAAMjE,IAAMkE,OAAO,CACvBC,QAHc,KAMHC,EAAS,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACFL,EAAI/B,KAAK,cAAemC,GADtB,cACfE,EADe,OAErBnE,QAAQC,IAAIkE,GACZC,aAAaC,QAAQ,YAAaF,EAAKhE,KAAKmE,OAC5CT,EAAIU,SAASC,QAAQC,OAAOC,cAA5B,iBAAsDP,EAAKhE,KAAKmE,OAJ3C,kBAKdH,EAAKhE,KAAKwE,MALI,2CAAH,sDAQPC,EAAY,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sEACPL,EAAI/B,KAAK,UAAW,CAAE6C,KAAME,IADrB,cACpBV,EADoB,yBAEnBA,EAAKhE,MAFc,2CAAH,sD,6jBCCrB2E,E,2MACJnF,MAAQ,CACNoF,YAAa,KACbC,aAAc,CACZ1B,SAAU,GACVM,MAAO,GACPJ,SAAU,K,EAGdyB,kBAAoB,WAClB,EAAK1G,MAAM2G,QAAQC,KAAK,W,EAG1B/B,Y,sBAAc,4BAAAc,EAAA,sEACWF,EAAU,EAAKrE,MAAMqF,cADhC,OACNI,EADM,OAEZ,EAAK9F,SAAS,CACZyF,YAAaK,IAEf,EAAK7G,MAAM2G,QAAQC,KAAK,UALZ,2C,EAQdxB,e,uCAAiB,WAAOT,GAAP,SAAAgB,EAAA,6DACfhB,EAAEC,iBADa,SAETyB,EAAa,EAAKjF,MAAMqF,cAFf,OAGf,EAAK5B,cACL,EAAK7E,MAAM2G,QAAQC,KAAK,UAJT,2C,wDAOjBE,a,sBAAe,sBAAAnB,EAAA,sDACbE,aAAakB,WAAW,OACxB,EAAKhG,SAAS,CACZyF,YAAa,OAEf,EAAKxG,MAAM2G,QAAQC,KAAK,KALX,2C,EAQfI,iB,uCAAmB,WAAOrC,GAAP,mBAAAgB,EAAA,wDACOhB,EAAE3D,OAAlBC,EADS,EACTA,KAAMC,EADG,EACHA,MACd,EAAKH,UAAS,SAAAkG,GAAS,MAAK,CAC1BR,aAAa,KACRQ,EAAUR,aADH,eAETxF,EAAOC,QALK,2C,8HAWT,IAAD,OACP,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,gBAAd,eAEF,6BACGC,KAAKa,MAAMoF,YAEV,oCACE,uBAAGlG,UAAU,aAAb,SAAgCC,KAAKa,MAAMoF,YAAYzB,UACvD,4BAAQzE,UAAU,SAAQL,QAASM,KAAKuG,cAAxC,WAGF,IAIJ,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAASC,OAAQ,kBACjC,kBAAC,EAAD,SAIF,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAC5B,kBAAC,EAAD,CACEvC,YAAa,EAAKA,YAClBG,aAAc,EAAKgC,iBACnBlC,SAAU,EAAK1D,MAAMqF,kBACzB,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,YAAYC,OAAQ,kBACpC,kBAAC,EAAD,CACEhC,eAAgB,EAAKA,eACrBJ,aAAc,EAAKgC,iBACnBlC,SAAU,EAAK1D,MAAMqF,uB,GA/Ef/F,aAuFH2G,cAAWd,GC3FNe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASP,OACT,kBAAC,IAAD,KACA,kBAAC,EAAD,OACWQ,SAASC,eAAe,SDuH7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,MAAK,SAAA0G,GACjCA,EAAaC,kB","file":"static/js/main.5b9b0a5e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Idea extends Component {\n\n  handleClick = () => {\n    this.props.onClick(this.props.idea.id)\n  }\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.idea.id)\n  }\n\n  render () {\n    return(\n      <div className=\"post-it\">\n        <span className=\"deleteButton\" onClick={this.handleDelete}>\n          x\n      </span>\n        <h4 className=\"note-title\" onClick={this.handleClick}>\n          {this.props.idea.title}\n        </h4>\n        <p className=\"note-body\"onClick={this.handleClick}>\n          {this.props.idea.body}\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default Idea","import React, { Component } from 'react'\nimport axios from 'axios'\nimport './Ideas.css'\n\nclass IdeaForm extends Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            title: this.props.idea.title,\n            body: this.props.idea.body\n        }\n    }\n\n    handleInput = (event) => {\n        this.props.resetNotification()\n        this.setState({[event.target.name]: event.target.value})\n      }\n\n      handleBlur = () => {\n        const idea = {title: this.state.title, body: this.state.body }\n        axios.put(\n          `http://localhost:3000/ideas/${this.props.idea.id}`,\n          {idea: idea}\n          )\n        .then(response => {\n          console.log(response)\n          this.props.updateIdea(response.data)\n        })\n        .catch(error => console.log(error))\n      }\n\n    render() {\n        return (\n            <div className=\"post-it\">\n                <form onBlur={this.handleBlur} >\n\t\t\t\t\t<input className='note-text' type=\"text\" name=\"title\" placeholder='Enter a Title'\n            value={this.state.title} onChange={this.handleInput}\n            ref={this.props.titleRef} />\n\t\t\t\t\t<textarea className='note-text' name=\"body\" placeholder='Describe your idea'\n            value={this.state.body} onChange={this.handleInput}></textarea>\n      \t</form>\n            </div>\n        );\n    }\n}\n\nexport default IdeaForm","import React from 'react'\nimport Transition from 'react-transition-group/Transition'\n\nconst duration = 1000\n\nconst defaultStyle = {\n  transition: `background ${duration}ms ease-in-out, opacity ${duration}ms ease-in-out`,\n  opacity: 0,\n  padding: '10px'\n}\n\nconst transitionStyles = {\n  entering: { opacity: 1, background: 'lightgreen' },\n  entered:  { opacity: 1 },\n}\n\nconst Notification = ({ in: inProp, notification }) =>\n  <Transition in={inProp} timeout={duration}>\n    {(transitionState) => {\n      return(\n        <span style={{\n          ...defaultStyle,\n          ...transitionStyles[transitionState]\n        }}>\n          {notification}\n        </span>\n      )\n\n    }}\n  </Transition>\n\nexport default Notification","import React, { Component } from 'react'\nimport axios from 'axios'\nimport update from 'immutability-helper'\nimport Idea from './Idea'\nimport IdeaForm from './IdeaForm'\n import Notification from './Notification'\nimport './Ideas.css'\n\nconst url = 'http://localhost:3000/ideas'\n\nclass IdeasContainer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            ideas: [],\n            editingIdeaId: null,\n            notification: '',\n            transitionIn: false\n        }\n    }\n\n    componentDidMount() {\n      axios.get( )\n      .then(response => {\n          this.setState({ideas: response.data})\n      })\n      .catch(error => console.log(error))\n    }\n\n    addNewIdea = () => {\n        axios.post(\n        {idea: {title: '', body: ''}})\n        .then(response => {\n            const ideas = update(this.state.ideas, {\n                $splice: [[0, 0, response.data]]\n              })\n              this.setState(\n                  {\n                      ideas: ideas,\n                    editingIdeaId: response.data.id})\n        })\n        .catch(error => console.log(error))\n      }\n\n      updateIdea = (idea) => {\n        const ideaIndex = this.state.ideas.findIndex(x => x.id === idea.id)\n        const ideas = update(this.state.ideas, {[ideaIndex]: { $set: idea }})\n        this.setState({ideas: ideas, notification: 'Idea saved', transitionIn: true})\n      }\n\n      deleteIdea = (id) => {\n        axios.delete(`${id}`)\n        .then(response => {\n          const ideaIndex = this.state.ideas.findIndex(x => x.id === id)\n          const ideas = update(this.state.ideas, { $splice: [[ideaIndex, 1]]})\n          this.setState({ideas: ideas})\n        })\n        .catch(error => console.log(error))\n      }\n\n      resetNotification = () => {\n        this.setState({notification: '', transitionIn: false})}\n\n        enableEditing = (id) => {\n          this.setState({editingIdeaId: id}, () => { \n            this.title.focus() })\n        }\n      \n     \n  render() {\n    return (\n      <div>\n          <div>\n          <button className=\"newIdeaButton\"\n            onClick={this.addNewIdea}>\n            New Idea\n          </button>\n          <Notification in={this.state.transitionIn} notification= {this.state.notification} />\n          </div>\n        {this.state.ideas.map((idea) => {\n            if(this.state.editingIdeaId === idea.id) {\n                return(\n                <IdeaForm idea={idea} key={idea.id} \n                updateIdea={this.updateIdea}\n                titleRef= {input => this.title = input}\n                resetNotification={this.resetNotification}/>)\n            } else {\n            return(\n                <Idea idea={idea} key={idea.id} \n                onClick={this.enableEditing}\n                onDelete={this.deleteIdea}\n                />)\n            }    \n        })}\n      </div>\n    );\n  }\n}\n\nexport default IdeasContainer","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\n// This component handles our login form and has a link to the register form\nconst Login = (props) => {\n\n  return (\n    <div className=\"auth-container\">\n      <h2 className=\"log-title\">login</h2>\n      <br />\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        props.handleLogin();}} >\n        <p>Username:</p>\n        <input name=\"username\" type=\"text\" value={props.formData.username} onChange={props.handleChange} />\n        <p>Password:</p>\n        <input name=\"password\" type=\"password\" value={props.formData.password} onChange={props.handleChange} />\n        <br/>\n        <button className=\"Login\">Login</button>\n        <Link to='/register' className=\"register\">Register</Link>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\n\n// This component handles our register form\nconst Register = (props) => {\n\n  return (\n    <div className=\"auth-container\">\n      <h2>Register</h2>\n      <br />\n      <form onSubmit={props.handleRegister} >\n        <p>Username:</p>\n        <input name=\"username\" type=\"text\" value={props.formData.username} onChange={props.handleChange} />\n        <p>Email:</p>\n        <input name=\"email\" type=\"text\" value={props.formData.email} onChange={props.handleChange} />\n        <p>Password:</p>\n        <input name=\"password\" type=\"password\" value={props.formData.password} onChange={props.handleChange} />\n        <br/>\n        <button className=\"register\">Register</button>\n      </form>\n    </div>\n  );\n}\n\nexport default Register;","import axios from 'axios';\nconst baseUrl = ''\n\nconst api = axios.create({\n  baseURL: baseUrl\n})\n\nexport const loginUser = async (loginData) => {\n    const resp = await api.post('/auth/login', loginData)\n    console.log(resp)\n    localStorage.setItem('authToken', resp.data.token);\n    api.defaults.headers.common.authorization = `Bearer ${resp.data.token}`\n    return resp.data.user\n  }\n  \n  export const registerUser = async (registerData) => {\n    const resp = await api.post('/users/', { user: registerData })\n    return resp.data\n  }\n  \n  export const verifyUser = async () => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      api.defaults.headers.common.authorization = `Bearer ${token}`\n      const resp = await api.get('/users/verify');\n      return resp.data\n    }\n    return false;\n  }","import React, { Component } from 'react'\nimport './App.css'\nimport IdeasContainer from './components/IdeasContainer'\nimport { Route, withRouter } from 'react-router-dom'\n\n\nimport decode from 'jwt-decode'\nimport Login from './components/Login'\nimport Register from './components/Register'\n\nimport {\n  loginUser,\n  registerUser,\n  verifyUser\n} from './services/api-helper'\n\nclass App extends Component {\n  state = {\n    currentUser: null,\n    authFormData: {\n      username: \"\",\n      email: \"\",\n      password: \"\"\n    }\n  }\n  handleLoginButton = () => {\n    this.props.history.push(\"/login\")\n  }\n\n  handleLogin = async () => {\n    const userData = await loginUser(this.state.authFormData);\n    this.setState({\n      currentUser: userData\n    })\n    this.props.history.push('/notes')\n  }\n\n  handleRegister = async (e) => {\n    e.preventDefault();\n    await registerUser(this.state.authFormData);\n    this.handleLogin();\n    this.props.history.push('/notes')\n  }\n\n  handleLogout = async () => {\n    localStorage.removeItem(\"jwt\");\n    this.setState({\n      currentUser: null\n    })\n    this.props.history.push('/')\n  }\n\n  authHandleChange = async (e) => {\n    const { name, value } = e.target;\n    this.setState(prevState => ({\n      authFormData: {\n        ...prevState.authFormData,\n        [name]: value\n      }\n    }));\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1 className=\"header-title\">Brainstorm</h1>\n        </div>\n        <div>\n          {this.state.currentUser\n            ?\n            <>\n              <p className='user-name'>Hello {this.state.currentUser.username}</p>\n              <button className='logout'onClick={this.handleLogout}>Logout</button>\n            </>\n            :\n            ''\n\n          }\n        </div>\n        <Route exact path=\"/notes\" render={() => (\n          <IdeasContainer />\n        )}\n        />\n\n        <Route exact path=\"/\" render={() => (\n          <Login\n            handleLogin={this.handleLogin}\n            handleChange={this.authHandleChange}\n            formData={this.state.authFormData} />)} />\n        <Route exact path=\"/register\" render={() => (\n          <Register\n            handleRegister={this.handleRegister}\n            handleChange={this.authHandleChange}\n            formData={this.state.authFormData} />)} />\n\n      </div>\n    );\n\n  }\n}\n\nexport default withRouter(App) ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n import { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Router>\n<App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}